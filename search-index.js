var searchIndex = {};
searchIndex['hoedown'] = {"items":[[0,"","hoedown","This crate provides bindings for the [hoedown] markdown processing library.\n It has a `Markdown` type which stores markdown text in a `Buffer`. The\n markdown can then be rendered with any renderer that implements the `Render`\n trait. The library comes with an `Html` renderer by default."],[3,"Extension","","Constants for the various Hoedown extensions"],[3,"Markdown","","Markdown document"],[0,"buffer","","Markdown buffers"],[3,"Buffer","hoedown::buffer","Buffer for holding markdown contents"],[11,"new","","Create a buffer with the specified unit allocation size.",0],[11,"from_str","","Create a buffer from a string",0],[11,"from","","Create a 'read-only' buffer from the given `hoedown_buffer`",0],[11,"get","","Get a reference to the underlying buffer",0],[11,"get_mut","","Get a mutable reference to the underlying buffer",0],[11,"is_empty","","Check if the buffer is empty",0],[11,"len","","The length of the contents inside the buffer",0],[11,"as_ptr","","Get a raw constant pointer to the buffer data",0],[11,"pipe","","Pipe another buffer's contents into this one",0],[11,"as_slice","","Get a slice of the buffer's contents",0],[11,"as_mut_slice","","Get a mutable slice of the buffer's contents",0],[11,"as_str","","Attempt to get a string from the buffer's contents",0],[11,"clone","","",0],[11,"read","","",0],[11,"write_all","","",0],[11,"drop","","",0],[0,"renderer","hoedown","Contains Render behavior and stock renderers"],[4,"Table","hoedown::renderer","The table alignment or position"],[13,"Left","","",1],[13,"Right","","",1],[13,"Center","","",1],[13,"Mask","","",1],[13,"Header","","",1],[4,"AutoLink","","The type of an autolink candidate"],[13,"Normal","","",2],[13,"Email","","",2],[0,"list","","Flags that describe a list or list item"],[3,"List","hoedown::renderer::list","Flags that describe a list or list item"],[17,"ORDERED","","An ordered list or list item"],[17,"BLOCK","","A list item that contains a block"],[11,"hash","","",3],[11,"cmp","","",3],[11,"partial_cmp","","",3],[11,"lt","","",3],[11,"le","","",3],[11,"gt","","",3],[11,"ge","","",3],[11,"clone","","",3],[11,"eq","","",3],[11,"ne","","",3],[11,"empty","","Returns an empty set of flags.",3],[11,"all","","Returns the set containing all flags.",3],[11,"bits","","Returns the raw value of the flags currently stored.",3],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",3],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",3],[11,"is_empty","","Returns `true` if no flags are currently stored.",3],[11,"is_all","","Returns `true` if all flags are currently set.",3],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",3],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",3],[11,"insert","","Inserts the specified flags in-place.",3],[11,"remove","","Removes the specified flags in-place.",3],[11,"toggle","","Toggles the specified flags in-place.",3],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",3],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",3],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",3],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",3],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",3],[0,"html","hoedown::renderer","Contains the html renderer and utilities"],[3,"Flags","hoedown::renderer::html","Information about a list item"],[3,"Html","","HTML renderer"],[5,"smartypants","","Performs \"smartypants\" processing of the provided buffer."],[17,"SKIP_HTML","","Ignore raw html"],[17,"ESCAPE","","Ignore raw html blocks and escape html spans"],[17,"HARD_WRAP","","Insert breaks inside paragraphs for every newline"],[17,"USE_XHTML","","Output XHTML"],[11,"hash","","",4],[11,"cmp","","",4],[11,"partial_cmp","","",4],[11,"lt","","",4],[11,"le","","",4],[11,"gt","","",4],[11,"ge","","",4],[11,"clone","","",4],[11,"eq","","",4],[11,"ne","","",4],[11,"empty","","Returns an empty set of flags.",4],[11,"all","","Returns the set containing all flags.",4],[11,"bits","","Returns the raw value of the flags currently stored.",4],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",4],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",4],[11,"is_empty","","Returns `true` if no flags are currently stored.",4],[11,"is_all","","Returns `true` if all flags are currently set.",4],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",4],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",4],[11,"insert","","Inserts the specified flags in-place.",4],[11,"remove","","Removes the specified flags in-place.",4],[11,"toggle","","Toggles the specified flags in-place.",4],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",4],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",4],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",4],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",4],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",4],[11,"new","","Construct a new html renderer given the provided html flags\nand table of contents nesting level.",5],[11,"toc","","Construct a table of contents renderer.",5],[11,"get","","Get a reference to the underlying hoedown renderer",5],[11,"get_mut","","Get a mutable reference to the underlying hoedown renderer",5],[11,"to_hoedown","","",5],[11,"code_block","","",5],[11,"quote_block","","",5],[11,"header","","",5],[11,"horizontal_rule","","",5],[11,"list","","",5],[11,"list_item","","",5],[11,"paragraph","","",5],[11,"table","","",5],[11,"table_header","","",5],[11,"table_body","","",5],[11,"table_row","","",5],[11,"table_cell","","",5],[11,"footnotes","","",5],[11,"footnote_definition","","",5],[11,"html_block","","",5],[11,"autolink","","",5],[11,"code_span","","",5],[11,"double_emphasis","","",5],[11,"emphasis","","",5],[11,"underline","","",5],[11,"highlight","","",5],[11,"quote_span","","",5],[11,"image","","",5],[11,"line_break","","",5],[11,"link","","",5],[11,"triple_emphasis","","",5],[11,"strikethrough","","",5],[11,"superscript","","",5],[11,"footnote_reference","","",5],[11,"math","","",5],[11,"html_span","","",5],[11,"entity","","",5],[11,"normal_text","","",5],[11,"before_render","","",5],[11,"after_render","","",5],[11,"drop","","",5],[0,"closures","hoedown::renderer","Contains the Closures renderer"],[3,"Closures","hoedown::renderer::closures","A renderer whose behavior is defined by closures."],[11,"new","","",6],[11,"code_block","","",6],[11,"quote_block","","",6],[11,"header","","",6],[11,"horizontal_rule","","",6],[11,"list","","",6],[11,"list_item","","",6],[11,"paragraph","","",6],[11,"table","","",6],[11,"table_header","","",6],[11,"table_body","","",6],[11,"table_row","","",6],[11,"table_cell","","",6],[11,"footnotes","","",6],[11,"footnote_definition","","",6],[11,"html_block","","",6],[11,"autolink","","",6],[11,"code_span","","",6],[11,"double_emphasis","","",6],[11,"emphasis","","",6],[11,"underline","","",6],[11,"highlight","","",6],[11,"quote_span","","",6],[11,"image","","",6],[11,"line_break","","",6],[11,"link","","",6],[11,"triple_emphasis","","",6],[11,"strikethrough","","",6],[11,"superscript","","",6],[11,"footnote_reference","","",6],[11,"math","","",6],[11,"html_span","","",6],[11,"entity","","",6],[11,"normal_text","","",6],[11,"before_render","","",6],[11,"after_render","","",6],[11,"on_code_block","","",6],[11,"on_quote_block","","",6],[11,"on_header","","",6],[11,"on_horizontal_rule","","",6],[11,"on_list","","",6],[11,"on_list_item","","",6],[11,"on_paragraph","","",6],[11,"on_table","","",6],[11,"on_table_header","","",6],[11,"on_table_body","","",6],[11,"on_table_row","","",6],[11,"on_table_cell","","",6],[11,"on_footnotes","","",6],[11,"on_footnote_definition","","",6],[11,"on_html_block","","",6],[11,"on_autolink","","",6],[11,"on_code_span","","",6],[11,"on_double_emphasis","","",6],[11,"on_emphasis","","",6],[11,"on_underline","","",6],[11,"on_highlight","","",6],[11,"on_quote","","",6],[11,"on_image","","",6],[11,"on_line_break","","",6],[11,"on_link","","",6],[11,"on_triple_emphasis","","",6],[11,"on_strikethrough","","",6],[11,"on_superscript","","",6],[11,"on_footnote_reference","","",6],[11,"on_math","","",6],[11,"on_html_span","","",6],[11,"on_entity","","",6],[11,"on_normal_text","","",6],[11,"on_before_render","","",6],[11,"on_after_render","","",6],[8,"Render","hoedown::renderer","Represents render behavior"],[11,"to_hoedown","","Converts the type into an underlying `hoedown_renderer` structure.",7],[11,"code_block","","Runs when a codeblock is encountered",7],[11,"quote_block","","Runs when a block quote is encountered",7],[11,"header","","Runs when a header is encountered",7],[11,"horizontal_rule","","Runs when a horizontal rule is encountered",7],[11,"list","","Runs when a list is encountered.",7],[11,"list_item","","Runs when a list item is encountered.",7],[11,"paragraph","","Runs when a paragraph is encountered.",7],[11,"table","","Runs when a table is encountered.",7],[11,"table_header","","Runs when a table header is encountered.",7],[11,"table_body","","Runs when a table body is encountered.",7],[11,"table_row","","Runs when a table row is encountered.",7],[11,"table_cell","","Runs when a table cell is encountered.",7],[11,"footnotes","","Runs when footnotes are encountered.",7],[11,"footnote_definition","","Runs when a footnote definition is encountered.",7],[11,"html_block","","Runs when a raw html block is encountered.",7],[11,"autolink","","Runs when an autolink candidate is encountered.",7],[11,"code_span","","Runs when a code span is encountered.",7],[11,"double_emphasis","","Runs when double emphasis is encountered.",7],[11,"emphasis","","Runs when emphasis is encountered.",7],[11,"underline","","Runs when underline is encountered.",7],[11,"highlight","","Runs when highlight is encountered.",7],[11,"quote_span","","Runs when a quote is encountered.",7],[11,"image","","Runs when an image is encountered.",7],[11,"line_break","","Runs when a line break is encountered.",7],[11,"link","","Runs when a link is encountered.",7],[11,"triple_emphasis","","Runs when triple emphasis is encountered.",7],[11,"strikethrough","","Runs when strikethrough is encountered.",7],[11,"superscript","","Runs when superscript is encountered.",7],[11,"footnote_reference","","Runs when a footnote reference is encountered.",7],[11,"math","","Runs when math is encountered.",7],[11,"html_span","","Runs when raw html span is encountered.",7],[11,"entity","","Runs when an html entity is encountered.",7],[11,"normal_text","","Runs when plain text is encountered.",7],[11,"before_render","","Runs before the document is processed.",7],[11,"after_render","","Runs after the document has been processed.",7],[11,"fmt","","",1],[11,"fmt","","",2],[17,"TABLES","hoedown","Process table syntax"],[17,"FENCED_CODE","","Process fenced code"],[17,"FOOTNOTES","","Process footnotes"],[17,"AUTOLINK","","Automatically link URLs and emails"],[17,"STRIKETHROUGH","","\nEnable strikethrough syntax"],[17,"UNDERLINE","","Perform an underline instead of emphasis"],[17,"HIGHLIGHT","","\nProcess highlight syntax"],[17,"QUOTE","","\nRender quotes differently"],[17,"SUPERSCRIPT","","\nProcess superscript syntax"],[17,"MATH","","\nProcess math syntax"],[17,"NO_INTRA_EMPHASIS","","\nDon't parse emphasis inside of words"],[17,"SPACE_HEADERS","","\nProcess ATX header syntax"],[17,"MATH_EXPLICIT","","\nProcess the single dollar math syntax."],[17,"DISABLE_INDENTED_CODE","","Ignore indented code blocks"],[11,"hash","","",8],[11,"cmp","","",8],[11,"partial_cmp","","",8],[11,"lt","","",8],[11,"le","","",8],[11,"gt","","",8],[11,"ge","","",8],[11,"clone","","",8],[11,"eq","","",8],[11,"ne","","",8],[11,"empty","","Returns an empty set of flags.",8],[11,"all","","Returns the set containing all flags.",8],[11,"bits","","Returns the raw value of the flags currently stored.",8],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",8],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",8],[11,"is_empty","","Returns `true` if no flags are currently stored.",8],[11,"is_all","","Returns `true` if all flags are currently set.",8],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",8],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",8],[11,"insert","","Inserts the specified flags in-place.",8],[11,"remove","","Removes the specified flags in-place.",8],[11,"toggle","","Toggles the specified flags in-place.",8],[6,"Output","",""],[11,"bitor","","Returns the union of the two sets of flags.",8],[6,"Output","",""],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",8],[6,"Output","",""],[11,"bitand","","Returns the intersection between the two sets of flags.",8],[6,"Output","",""],[11,"sub","","Returns the set difference of the two sets of flags.",8],[6,"Output","",""],[11,"not","","Returns the complement of this set of flags.",8],[11,"new","","Construct a markdown document from a given Reader",9],[11,"from_str","","Construct a markdown document from a string",9],[11,"with_extensions","","Builder method to specify Hoedown extensions",9],[11,"with_max_nesting","","Builder method to specify the maximum block depth to parse",9],[11,"render_into_buffer","","Render the document into the given buffer",9],[11,"render_to_buffer","","Render the document to a buffer that is returned",9],[11,"render","","Render the document to a given Writer",9],[11,"render_inline_into_buffer","","Render the document as inline into the given buffer",9],[11,"render_inline_to_buffer","","Render the document as inline to a buffer that is returned",9],[11,"render_inline","","Render the document as inline to a given Writer",9]],"paths":[[3,"Buffer"],[4,"Table"],[4,"AutoLink"],[3,"List"],[3,"Flags"],[3,"Html"],[3,"Closures"],[8,"Render"],[3,"Extension"],[3,"Markdown"]]};
searchIndex['regex_macros'] = {"items":[[0,"","regex_macros","This crate provides the `regex!` macro. Its use is documented in the\n`regex` crate."]],"paths":[]};

searchIndex['regex'] = {"items":[[0,"","regex","This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst case performance. The specific syntax supported is\ndocumented further down."],[3,"Error","","Error corresponds to something that can go wrong while parsing\na regular expression."],[12,"pos","","The *approximate* character index of where the error occurred.",0],[12,"msg","","A message describing the error.",0],[3,"Captures","","Captures represents a group of captured strings for a single match."],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression."],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression."],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression."],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string."],[3,"NoExpand","","NoExpand indicates literal string replacement."],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match."],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match."],[4,"Regex","","A compiled regular expression"],[5,"quote","","Escapes all regular expression meta characters in `text`."],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given."],[11,"fmt","","",0],[11,"fmt","","",0],[11,"clone","","",1],[11,"fmt","","Shows the original regular expression.",1],[11,"fmt","","Shows the original regular expression.",1],[11,"new","","Compiles a dynamic regular expression. Once compiled, it can be\nused repeatedly to search, split or replace text in a string.",1],[11,"is_match","","Returns true if and only if the regex matches the string given.",1],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",1],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",1],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",1],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter` (except it\nyields information about submatches).",1],[11,"split","","Returns an iterator of substrings of `text` delimited by a match\nof the regular expression.\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.",1],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.)\nNamely, each element of the iterator corresponds to text that *isn't*\nmatched by the regular expression.\nThe remainder of the string that is not split will be the last element\nin the iterator.",1],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches'\n`Captures` and returns the replaced string.",1],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the\nreplacement provided. This is the same as calling `replacen` with\n`limit` set to `0`.",1],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",1],[11,"as_str","","Returns the original string of this regex.",1],[11,"reg_replace","","",2],[11,"next","","",3],[11,"next","","",4],[11,"pos","","Returns the start and end positions of the Nth capture group.\nReturns `None` if `i` is not a valid capture group or if the capture\ngroup did not match anything.\nThe positions returned are *always* byte indices with respect to the\noriginal string matched.",5],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn't\na valid capture group or didn't match anything, then `None` is\nreturned.",5],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn't a valid capture group or didn't match anything, then\n`None` is returned.",5],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",5],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",5],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",5],[11,"len","","Returns the number of captured groups.",5],[11,"is_empty","","Returns if there are no captured groups.",5],[11,"next","","",6],[11,"next","","",7],[11,"next","","",8],[11,"next","","",9],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string."],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",10]],"paths":[[3,"Error"],[4,"Regex"],[3,"NoExpand"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};

searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator."],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs."]],"paths":[]};

initSearch(searchIndex);
